{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "CallWFConfigure": {
                "inputs": {
                    "authentication": {
                        "audience": "api://1623b924-49f6-41ac-b6a9-3c85abae2067",
                        "authority": "",
                        "clientId": "1623b924-49f6-41ac-b6a9-3c85abae2067",
                        "secret": "vmv8Q~cmGP2N0Qc.qZ9vy.AXqtBLDtAGwV~oBcgp",
                        "tenant": "f8cd4990-6d46-448a-af3a-2c27c2bf1a28",
                        "type": "ActiveDirectoryOAuth"
                    },
                    "body": "@outputs('InputForWFConfigure')",
                    "method": "POST",
                    "uri": "https://devfunctionappfeb-configure.azurewebsites.net/api/wf_configure_HttpTrigger1?code=GgvGS9PaduKgwCmCpflbPypQI0V849pHlRFHwNyrzdBAAzFuwl2QAA=="
                },
                "runAfter": {
                    "InputForWFConfigure": [
                        "SUCCEEDED"
                    ]
                },
                "runtimeConfiguration": {
                    "contentTransfer": {
                        "transferMode": "Chunked"
                    }
                },
                "type": "Http"
            },
            "CopyBlobToStagingContainer": {
                "inputs": {
                    "parameters": {
                        "destinationBlobName": "@{outputs('staging_config')?['folder_path']}/@{outputs('staging_config')?['file_prefix']}_@{outputs('context1')?['trigger_file']['name']}",
                        "destinationContainerName": "@outputs('buckets')?['staging']",
                        "overrideIfExists": true,
                        "sourceBlobName": "@outputs('context1')?['trigger_file']['full_path']",
                        "sourceContainerName": "@outputs('context1')?['trigger_file']['bucket_name']"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "AzureBlob",
                        "operationId": "copyBlob",
                        "serviceProviderId": "/serviceProviders/AzureBlob"
                    }
                },
                "runAfter": {
                    "content_config": [
                        "SUCCEEDED"
                    ]
                },
                "type": "ServiceProvider"
            },
            "For_each": {
                "actions": {
                    "Delete_blob_(V2)": {
                        "inputs": {
                            "headers": {
                                "SkipDeleteIfFileNotFoundOnServer": false
                            },
                            "host": {
                                "connection": {
                                    "referenceName": "azureblob"
                                }
                            },
                            "method": "delete",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(outputs('LandingFileData')?['storageaccountname']))}/files/@{encodeURIComponent(encodeURIComponent(outputs('StagingBlobName')?['BlobName']))}"
                        },
                        "runAfter": {
                            "StagingBlobName": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "ApiConnection"
                    },
                    "StagingBlobName": {
                        "inputs": {
                            "BlobName": "@items('For_each')?['Path']"
                        },
                        "type": "Compose"
                    }
                },
                "foreach": "@body('ListsStagingContainerBlobs')?['value']",
                "runAfter": {
                    "ListsStagingContainerBlobs": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Foreach"
            },
            "GetLandingContainerMetadata": {
                "inputs": {
                    "client_id": "@toLower(concat(outputs('HTTPRequestForMetadata')?['headers']['x-ms-meta-ci_client']))",
                    "step": "@toLower(concat(outputs('HTTPRequestForMetadata')?['headers']['x-ms-meta-ci_step']))",
                    "type": "@toLower(concat(outputs('HTTPRequestForMetadata')?['headers']['x-ms-meta-ci_media_type']))"
                },
                "runAfter": {
                    "HTTPRequestForMetadata": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "HTTPRequestForMetadata": {
                "inputs": {
                    "authentication": {
                        "audience": "https://storage.azure.com",
                        "type": "ManagedServiceIdentity"
                    },
                    "headers": {
                        "x-ms-blob-type": "BlockBlob",
                        "x-ms-date": "@{formatDateTime(utcNow(),'r')}",
                        "x-ms-version": "2019-02-02"
                    },
                    "method": "GET",
                    "uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('LandingFileData')?['landingcontainername']}?restype=container&comp=metadata"
                },
                "runAfter": {
                    "LandingFileData": [
                        "SUCCEEDED"
                    ]
                },
                "runtimeConfiguration": {
                    "contentTransfer": {
                        "transferMode": "Chunked"
                    }
                },
                "type": "Http"
            },
            "If-CI_REDACT-true": {
                "actions": {
                    "CallWFRedact": {
                        "inputs": {
                            "authentication": {
                                "audience": "api://1623b924-49f6-41ac-b6a9-3c85abae2067",
                                "clientId": "1623b924-49f6-41ac-b6a9-3c85abae2067",
                                "secret": "vmv8Q~cmGP2N0Qc.qZ9vy.AXqtBLDtAGwV~oBcgp",
                                "tenant": "f8cd4990-6d46-448a-af3a-2c27c2bf1a28",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": "@outputs('InputForRedact')",
                            "method": "POST",
                            "uri": "https://dev-functionappfeb-redact.azurewebsites.net/api/wf_redact_HttpTrigger1?code=5oFsAT0P1tQCnZPXzSnZvxnRQI28bCHnQE8XzCKyd02tAzFuWRPciA=="
                        },
                        "runAfter": {
                            "InputForRedact": [
                                "SUCCEEDED"
                            ]
                        },
                        "runtimeConfiguration": {
                            "contentTransfer": {
                                "transferMode": "Chunked"
                            }
                        },
                        "type": "Http"
                    },
                    "IfAudioInWorkingFile": {
                        "actions": {
                            "redactaudioinput": {
                                "inputs": {
                                    "audio": "@outputs('tempredactaudioinput')"
                                },
                                "runAfter": {
                                    "tempredactaudioinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempredactaudioinput": {
                                "inputs": {
                                    "bucket_name": "@outputs('working_files10')?['audio']['bucket']",
                                    "full_path": "@outputs('working_files10')?['audio']['object']",
                                    "version": "@outputs('working_files10')?['audio']['generation']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files10')",
                                        "audio"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "redaction_input_files-nlp-transcript": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "IfVideoInWorkingFile": {
                        "actions": {
                            "redactvideoinput": {
                                "inputs": {
                                    "video": "@outputs('tempredactaudioinput')"
                                },
                                "runAfter": {
                                    "tempredactvideoinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempredactvideoinput": {
                                "inputs": {
                                    "bucket_name": "@outputs('working_files10')?['audio']['bucket']",
                                    "full_path": "@outputs('working_files10')?['audio']['object']",
                                    "version": "@outputs('working_files10')?['audio']['generation']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files10')",
                                        "video"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "redaction_input_files.audio": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "If_redacted_audio": {
                        "actions": {
                            "staged_redacted_audio_obj": {
                                "inputs": {
                                    "bucket": "@body('CallWFRedact')?['staged_files']['redacted_audio']['bucket_name']",
                                    "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_audio']['version'])",
                                    "object": "@body('CallWFRedact')?['staged_files']['redacted_audio']['full_path']",
                                    "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_audio']['uploaded']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@body('CallWFRedact')?['staged_files']",
                                        "redacted_audio"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "CallWFRedact": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "If_redacted_nlp": {
                        "actions": {
                            "staged_redacted_nlp_obj": {
                                "inputs": {
                                    "bucket": "@body('CallWFRedact')?['staged_files']['redacted_nlp']['bucket_name']",
                                    "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_nlp']['version'])",
                                    "object": "@body('CallWFRedact')?['staged_files']['redacted_nlp']['full_path']",
                                    "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_nlp']['uploaded']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@body('CallWFRedact')?['staged_files']",
                                        "redacted_nlp"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "CallWFRedact": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "If_redacted_transcript": {
                        "actions": {
                            "staged_redacted_transcript_obj": {
                                "inputs": {
                                    "bucket": "@body('CallWFRedact')?['staged_files']['redacted_transcript']['bucket_name']",
                                    "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_transcript']['version'])",
                                    "object": "@body('CallWFRedact')?['staged_files']['redacted_transcript']['full_path']",
                                    "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_transcript']['uploaded']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@body('CallWFRedact')?['staged_files']",
                                        "redacted_transcript"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "CallWFRedact": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "If_redacted_video": {
                        "actions": {
                            "staged_redacted_video_obj": {
                                "inputs": {
                                    "bucket": "@body('CallWFRedact')?['staged_files']['redacted_video']['bucket_name']",
                                    "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_video']['version'])",
                                    "object": "@body('CallWFRedact')?['staged_files']['redacted_video']['full_path']",
                                    "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_video']['uploaded']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@body('CallWFRedact')?['staged_files']",
                                        "redacted_video"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "CallWFRedact": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "InputForRedact": {
                        "inputs": {
                            "context": "@outputs('context1')",
                            "function_config": {
                                "redact_config": {
                                    "types_to_redact": "@if(contains(outputs('config')?['redact']['CI_REDACT_OPTIONS'],'types_to_redact'),outputs('config')['redact']['CI_REDACT_OPTIONS']['types_to_redact'],'[]')"
                                },
                                "signing_account": "@outputs('config')?['redact']['CI_SA_EMAIL']"
                            },
                            "input_files": "@outputs('redaction_input_files')",
                            "staging_config": "@outputs('staging_config')"
                        },
                        "runAfter": {
                            "redaction_input_files": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "audio_tempfile1": {
                        "inputs": {
                            "audio": "@outputs('staged_redacted_audio_obj')"
                        },
                        "runAfter": {
                            "redacted_audio_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "nlp_tempfile1": {
                        "inputs": {
                            "nlp": "@outputs('staged_redacted_nlp_obj')"
                        },
                        "runAfter": {
                            "redacted_nlp_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "redacted_audio_tempfile1": {
                        "inputs": {
                            "redacted_audio": "@outputs('staged_redacted_audio_obj')"
                        },
                        "runAfter": {
                            "If_redacted_audio": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "redacted_nlp_tempfile1": {
                        "inputs": {
                            "redacted_nlp": "@outputs('staged_redacted_nlp_obj')"
                        },
                        "runAfter": {
                            "If_redacted_nlp": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "redacted_transcript_tempfile1": {
                        "inputs": {
                            "redacted_transcript": "@outputs('staged_redacted_transcript_obj')"
                        },
                        "runAfter": {
                            "If_redacted_transcript": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "redacted_video_tempfile1": {
                        "inputs": {
                            "redacted_video": "@outputs('staged_redacted_video_obj')"
                        },
                        "runAfter": {
                            "If_redacted_video": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "redaction_input_files": {
                        "inputs": "@removeProperty(union(outputs('redaction_input_files-nlp-transcript'),outputs('redaction_input_files.audio'),outputs('redaction_input_files.video')),'tempfile')",
                        "runAfter": {
                            "redaction_input_files.video": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "redaction_input_files-nlp-transcript": {
                        "inputs": {
                            "nlp": {
                                "bucket_name": "@outputs('working_files10')?['nlp']['bucket']",
                                "full_path": "@outputs('working_files10')?['nlp']['object']",
                                "version": "@outputs('working_files10')?['nlp']['generation']"
                            },
                            "transcript": {
                                "bucket_name": "@outputs('working_files10')?['transcript']['bucket']",
                                "full_path": "@outputs('working_files10')?['transcript']['object']",
                                "version": "@outputs('working_files10')?['transcript']['generation']"
                            }
                        },
                        "type": "Compose"
                    },
                    "redaction_input_files.audio": {
                        "inputs": "@if(equals(outputs('redactaudioinput')?['audio'],null),outputs('tempfile'),outputs('redactaudioinput'))",
                        "runAfter": {
                            "IfAudioInWorkingFile": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "redaction_input_files.video": {
                        "inputs": "@if(equals(outputs('redactvideoinput')?['video'],null),outputs('tempfile'),outputs('redactvideoinput'))",
                        "runAfter": {
                            "IfVideoInWorkingFile": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "staged_files12": {
                        "inputs": "@if(equals(outputs('redacted_transcript_tempfile1')?['redacted_transcript'],null),outputs('tempfile'),outputs('redacted_transcript_tempfile1'))",
                        "runAfter": {
                            "transcript_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "staged_files13": {
                        "inputs": "@if(equals(outputs('redacted_nlp_tempfile1')?['redacted_nlp'],null),outputs('tempfile'),outputs('redacted_nlp_tempfile1'))",
                        "runAfter": {
                            "nlp_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "staged_files14": {
                        "inputs": "@if(equals(outputs('redacted_audio_tempfile1')?['redacted_audio'],null),outputs('tempfile'),outputs('redacted_audio_tempfile1'))",
                        "runAfter": {
                            "audio_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "staged_files15": {
                        "inputs": "@if(equals(outputs('redacted_video_tempfile1')?['redacted_video'],null),outputs('tempfile'),outputs('redacted_video_tempfile1'))",
                        "runAfter": {
                            "video_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "transcript_tempfile1": {
                        "inputs": {
                            "transcript": "@outputs('staged_redacted_transcript_obj')"
                        },
                        "runAfter": {
                            "redacted_transcript_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "video_tempfile1": {
                        "inputs": {
                            "video": "@outputs('staged_redacted_video_obj')"
                        },
                        "runAfter": {
                            "redacted_video_tempfile1": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files11": {
                        "inputs": "@if(equals(outputs('transcript_tempfile1')?['transcript'],null),outputs('tempfile'),outputs('transcript_tempfile1'))",
                        "runAfter": {
                            "staged_files12": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files12": {
                        "inputs": "@if(equals(outputs('nlp_tempfile1')?['nlp'],null),outputs('tempfile'),outputs('nlp_tempfile1'))",
                        "runAfter": {
                            "staged_files13": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files13": {
                        "inputs": "@if(equals(outputs('audio_tempfile1')?['audio'],null),outputs('tempfile'),outputs('audio_tempfile1'))",
                        "runAfter": {
                            "staged_files14": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files14": {
                        "inputs": "@if(equals(outputs('video_tempfile1')?['video'],null),outputs('tempfile'),outputs('video_tempfile1'))",
                        "runAfter": {
                            "staged_files15": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    }
                },
                "else": {
                    "actions": {}
                },
                "expression": {
                    "or": [
                        {
                            "equals": [
                                "@outputs('config')?['redact']['CI_REDACT']",
                                false
                            ]
                        }
                    ]
                },
                "runAfter": {
                    "working_files10": [
                        "SUCCEEDED"
                    ]
                },
                "type": "If"
            },
            "IfTypeAudioVideoTranscript": {
                "actions": {
                    "IfTypeAudio": {
                        "actions": {
                            "workingfileaudio": {
                                "inputs": {
                                    "audio": "@outputs('staged_media_obj')"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "equals": [
                                        "@outputs('context1')?['type']",
                                        "audio"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "IfTypeChatOrTranscript": {
                        "actions": {
                            "workingfiletranscript": {
                                "inputs": {
                                    "transcript": "@outputs('staged_media_obj')"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "equals": [
                                        "@outputs('context1')?['type']",
                                        "chat"
                                    ]
                                },
                                {
                                    "equals": [
                                        "@outputs('context1')?['type']",
                                        "transcript"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "IfTypeVideo": {
                        "actions": {
                            "workingfilevideo": {
                                "inputs": {
                                    "video": "@outputs('staged_media_obj')"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "equals": [
                                        "@outputs('context1')?['type']",
                                        "video"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "ifaudiotype": {
                        "inputs": "@if(equals(outputs('workingfileaudio'),null),outputs('tempfile'),outputs('workingfileaudio'))",
                        "runAfter": {
                            "IfTypeAudio": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "iftranscripttype": {
                        "inputs": "@if(equals(outputs('workingfiletranscript'),null),outputs('tempfile'),outputs('workingfiletranscript'))",
                        "runAfter": {
                            "IfTypeChatOrTranscript": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "ifvideotype": {
                        "inputs": "@if(equals(outputs('workingfilevideo'),null),outputs('tempfile'),outputs('workingfilevideo'))",
                        "runAfter": {
                            "IfTypeVideo": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    }
                },
                "else": {
                    "actions": {}
                },
                "expression": {
                    "or": [
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "audio"
                            ]
                        },
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "video"
                            ]
                        },
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "chat"
                            ]
                        },
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "transcript"
                            ]
                        }
                    ]
                },
                "runAfter": {
                    "tempfile": [
                        "SUCCEEDED"
                    ]
                },
                "type": "If"
            },
            "If_CI_TRANSCRIPTION_true-Analyse": {
                "actions": {
                    "CallWFAnalyse": {
                        "inputs": {
                            "authentication": {
                                "audience": "api://1623b924-49f6-41ac-b6a9-3c85abae2067",
                                "clientId": "1623b924-49f6-41ac-b6a9-3c85abae2067",
                                "secret": "vmv8Q~cmGP2N0Qc.qZ9vy.AXqtBLDtAGwV~oBcgp",
                                "tenant": "f8cd4990-6d46-448a-af3a-2c27c2bf1a28",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": "@outputs('InputForAnalyse')",
                            "method": "POST",
                            "uri": "https://dev-functionappfeb-analyse.azurewebsites.net/api/wf_analyse_HttpTrigger1?code=h3hApCY5-TOfbOjBT_dfso7hFokRE9-_QN8hxHDhjkXkAzFuhk-mHA=="
                        },
                        "runAfter": {
                            "InputForAnalyse": [
                                "SUCCEEDED"
                            ]
                        },
                        "runtimeConfiguration": {
                            "contentTransfer": {
                                "transferMode": "Chunked"
                            }
                        },
                        "type": "Http"
                    },
                    "If-metrics": {
                        "actions": {
                            "staged_metrics_obj": {
                                "inputs": {
                                    "bucket": "@body('CallWFAnalyse')?['staged_files']['metrics']['bucket_name']",
                                    "generation": "@json(body('CallWFAnalyse')?['staged_files']['metrics']['version'])",
                                    "object": "@body('CallWFAnalyse')?['staged_files']['metrics']['full_path']",
                                    "uploaded_at": "@body('CallWFAnalyse')?['staged_files']['metrics']['uploaded']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@body('CallWFAnalyse')?['staged_files']",
                                        "metrics"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "CallWFAnalyse": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "If-nlp": {
                        "actions": {
                            "staged_nlp_obj": {
                                "inputs": {
                                    "bucket": "@body('CallWFAnalyse')?['staged_files']['nlp']['bucket_name']",
                                    "generation": "@json(body('CallWFAnalyse')?['staged_files']['nlp']['version'])",
                                    "object": "@body('CallWFAnalyse')?['staged_files']['nlp']['full_path']",
                                    "uploaded_at": "@body('CallWFAnalyse')?['staged_files']['nlp']['uploaded']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@body('CallWFAnalyse')?['staged_files']",
                                        "nlp"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "CallWFAnalyse": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "If-spellchecked_transcript": {
                        "actions": {
                            "staged_spellchecked_transcript_obj": {
                                "inputs": {
                                    "bucket": "@body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['bucket_name']",
                                    "generation": "@json(body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['version'])",
                                    "object": "@body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['full_path']",
                                    "uploaded_at": "@body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['uploaded']"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@body('CallWFAnalyse')?['staged_files']",
                                        "spellchecked_transcript"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "CallWFAnalyse": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "InputForAnalyse": {
                        "inputs": {
                            "context": "@outputs('context1')",
                            "function_config": {
                                "nlp_config": {
                                    "nlp_ignore": "@outputs('nlp_spellcheck_config')?['nlp_ignore']",
                                    "rule_patterns": "@outputs('nlp_spellcheck_config')?['rule_patterns']"
                                },
                                "spellcheck_config": {
                                    "add_words": "@outputs('nlp_spellcheck_config')?['add_words']"
                                }
                            },
                            "input_files": {
                                "transcript": {
                                    "bucket_name": "@outputs('staged_files7')?['transcript']['bucket']",
                                    "full_path": "@outputs('staged_files7')?['transcript']['object']",
                                    "version": "@outputs('staged_files7')?['transcript']['generation']"
                                }
                            },
                            "staging_config": "@outputs('staging_config')"
                        },
                        "runAfter": {
                            "nlp_spellcheck_config": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "nlp_spellcheck_config": {
                        "inputs": {
                            "add_words": "@if(contains(outputs('config')?['analyse_transcript'],'CI_SPELLCHECK_OPTIONS'),outputs('config')?['analyse_transcript']['CI_SPELLCHECK_OPTIONS']['add_words'],'[]')",
                            "nlp_ignore": "@if(contains(outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS'],'nlp_ignore'),outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS']['nlp_ignore'],'[]')",
                            "rule_patterns": "@if(contains(outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS'],'rule_patterns'),outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS']['rule_patterns'],'[]')"
                        },
                        "type": "Compose"
                    },
                    "staged_files10": {
                        "inputs": "@if(equals(outputs('tempstagedfiles8')?['spellchecked_transcript'],null),outputs('tempfile'),outputs('tempstagedfiles8'))",
                        "runAfter": {
                            "tempstagedfiles8": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "staged_files8": {
                        "inputs": "@if(equals(outputs('tempstagedfiles6')?['metrics'],null),outputs('tempfile'),outputs('tempstagedfiles6'))",
                        "runAfter": {
                            "tempstagedfiles6": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "staged_files9": {
                        "inputs": "@if(equals(outputs('tempstagedfiles7')?['nlp'],null),outputs('tempfile'),outputs('tempstagedfiles7'))",
                        "runAfter": {
                            "tempstagedfiles7": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "tempstagedfiles6": {
                        "inputs": {
                            "metrics": "@outputs('staged_metrics_obj')"
                        },
                        "runAfter": {
                            "If-metrics": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "tempstagedfiles7": {
                        "inputs": {
                            "nlp": "@outputs('staged_nlp_obj')"
                        },
                        "runAfter": {
                            "If-nlp": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "tempstagedfiles8": {
                        "inputs": {
                            "spellchecked_transcript": "@outputs('staged_spellchecked_transcript_obj')"
                        },
                        "runAfter": {
                            "If-spellchecked_transcript": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "tempworkingfile": {
                        "inputs": {
                            "transcript": "@outputs('staged_spellchecked_transcript_obj')"
                        },
                        "runAfter": {
                            "staged_files10": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files7": {
                        "inputs": "@if(equals(outputs('tempstagedfiles6')?['metrics'],null),outputs('tempfile'),outputs('tempstagedfiles6'))",
                        "runAfter": {
                            "staged_files8": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files8": {
                        "inputs": "@if(equals(outputs('tempstagedfiles7')?['nlp'],null),outputs('tempfile'),outputs('tempstagedfiles7'))",
                        "runAfter": {
                            "staged_files9": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files9": {
                        "inputs": "@if(equals(outputs('tempworkingfile')?['transcript'],null),outputs('tempfile'),outputs('tempworkingfile'))",
                        "runAfter": {
                            "tempworkingfile": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    }
                },
                "else": {
                    "actions": {}
                },
                "expression": {
                    "or": [
                        {
                            "equals": [
                                "@outputs('config')?['transcribe_media']['CI_TRANSCRIPTION']",
                                true
                            ]
                        }
                    ]
                },
                "runAfter": {
                    "working_files6": [
                        "SUCCEEDED"
                    ]
                },
                "type": "If"
            },
            "InputForWFConfigure": {
                "inputs": {
                    "context": "@outputs('context')",
                    "function_config": {
                        "config_bucket_name": "@outputs('context')?['config_bucket_name']",
                        "functions": "@parameters('INIT-Function')",
                        "label_tags": "@parameters('INIT-bucket_label_tags')"
                    },
                    "input_files": {
                        "source_file": {
                            "bucket_name": "@{outputs('LandingFileData')?['landingcontainername']}",
                            "full_path": "@{outputs('LandingFileData')?['filename']}",
                            "uploaded": "@{outputs('LandingFileData')?['event_time']}",
                            "version": "@{outputs('LandingFileData')?['version']}"
                        }
                    }
                },
                "runAfter": {
                    "context": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "LandingFileData": {
                "inputs": {
                    "config_bucket_name": "@{split(split(triggerBody()?['subject'],'/')[4],'-')[0]}-@{split(split(triggerBody()?['subject'],'/')[4],'-')[1]}-@{split(split(triggerBody()?['subject'],'/')[4],'-')[2]}",
                    "content_type": "@triggerBody()?['data']['contentType']",
                    "event_time": "@{triggerBody()?['event_time']}",
                    "filename": "@last(split(triggerBody()?['subject'],'/'))",
                    "full_path": "@triggerBody()?['subject']",
                    "landingcontainername": "@split(triggerBody()?['subject'],'/')[4]",
                    "size": "@triggerBody()?['data']['contentLength']",
                    "storageaccountname": "@last(split(triggerBody()?['topic'],'/'))",
                    "url": "@triggerBody()?['data']['url']",
                    "version": "@{triggerBody()?['data']['eTag']}"
                },
                "runAfter": {},
                "type": "Compose"
            },
            "ListsStagingContainerBlobs": {
                "inputs": {
                    "host": {
                        "connection": {
                            "referenceName": "azureblob"
                        }
                    },
                    "method": "get",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(outputs('LandingFileData')?['storageaccountname']))}/foldersV2/@{encodeURIComponent(encodeURIComponent('/',outputs('staging_config')?['bucket_name'],'/',outputs('staging_config')?['folder_path'],'/'))}",
                    "queries": {
                        "nextPageMarker": "",
                        "useFlatListing": false
                    }
                },
                "runAfter": {
                    "staged": [
                        "SUCCEEDED"
                    ]
                },
                "type": "ApiConnection"
            },
            "Send_Event": {
                "inputs": {
                    "parameters": {
                        "eventData": {
                            "contentData": "@outputs('encoded_message')"
                        },
                        "eventHubName": "dev-eventhub-feb"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "eventHub",
                        "operationId": "sendEvent",
                        "serviceProviderId": "/serviceProviders/eventHub"
                    }
                },
                "runAfter": {
                    "encoded_message": [
                        "SUCCEEDED"
                    ]
                },
                "type": "ServiceProvider"
            },
            "Send_an_email_(V2)": {
                "inputs": {
                    "body": {
                        "Body": "<p>Below are the details.</p><br><p>Workflow Execution ID : @{outputs('context')?['execution_id']}.</p><p>Uploaded File name : @{outputs('LandingFileData')?['filename']}.</p><p>Client_ID:@{outputs('GetLandingContainerMetadata')?['client_id']}.</p><p>URL:@{outputs('LandingFileData')?['url']}.</p><p>Blob_Path : @{outputs('LandingFileData')?['full_path']}</p>",
                        "Importance": "Normal",
                        "Subject": "Workflow failed-@{outputs('context')?['execution_id']}",
                        "To": "shubhamangala.k@sonata-software.com"
                    },
                    "host": {
                        "connection": {
                            "referenceName": "office365"
                        }
                    },
                    "method": "post",
                    "path": "/v2/Mail"
                },
                "runAfter": {
                    "For_each": [
                        "FAILED",
                        "TIMEDOUT",
                        "SKIPPED"
                    ]
                },
                "type": "ApiConnection"
            },
            "WorkingFilesData": {
                "actions": {
                    "IfAudioInWorkingFiles": {
                        "actions": {
                            "CopyAudioBlobFromStagingToContent": {
                                "inputs": {
                                    "parameters": {
                                        "destinationBlobName": "@{outputs('audiocopyinput')?['ContentPath']}/audio.@{outputs('audiocopyinput')?['extension']}",
                                        "destinationContainerName": "@outputs('audiocopyinput')?['ContentContainer']",
                                        "overrideIfExists": true,
                                        "sourceBlobName": "@outputs('audiocopyinput')?['StagingBlobPath']",
                                        "sourceContainerName": "@outputs('audiocopyinput')?['StagingContainer']"
                                    },
                                    "serviceProviderConfiguration": {
                                        "connectionName": "AzureBlob",
                                        "operationId": "copyBlob",
                                        "serviceProviderId": "/serviceProviders/AzureBlob"
                                    }
                                },
                                "runAfter": {
                                    "audiocopyinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ServiceProvider"
                            },
                            "audiocopyinput": {
                                "inputs": {
                                    "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['audio']['object'],'/')),'_'))",
                                    "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['audio']['object'],'/'))",
                                    "ContentContainer": "@outputs('buckets')?['content']",
                                    "ContentPath": "@outputs('content_config')?['folder_path']",
                                    "StagingBlobName": "@last(split(outputs('working_files15')?['audio']['object'],'/'))",
                                    "StagingBlobPath": "@outputs('working_files15')?['audio']['object']",
                                    "StagingBlobVersion": "@outputs('working_files15')?['audio']['generation']",
                                    "StagingContainer": "@outputs('working_files15')?['audio']['bucket']",
                                    "extension": "@last(split(last(split(last(split(outputs('working_files15')?['audio']['object'],'/')),'_')),'.'))"
                                },
                                "type": "Compose"
                            },
                            "tempcontentfile2": {
                                "inputs": {
                                    "bucket": "@outputs('CopyAudioBlobFromStagingToContent')?['body']['containerName']",
                                    "generation": "@json(outputs('CopyAudioBlobFromStagingToContent')?['body']['eTag'])",
                                    "object": "@outputs('CopyAudioBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                                    "uploaded_at": "@outputs('CopyAudioBlobFromStagingToContent')?['body']['creationTime']"
                                },
                                "runAfter": {
                                    "CopyAudioBlobFromStagingToContent": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempfilelist2": {
                                "inputs": {
                                    "file_gen": "@json(outputs('CopyAudioBlobFromStagingToContent')?['body']['eTag'])",
                                    "file_name": "@first(split(last(split(outputs('CopyAudioBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                                    "file_name_ext": "@last(split(outputs('CopyAudioBlobFromStagingToContent')?['body']['name'],'/'))",
                                    "file_type": "audio",
                                    "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyAudioBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                                },
                                "runAfter": {
                                    "tempcontentfile2": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files15')",
                                        "audio"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "IfMetricsInWorkingFiles": {
                        "actions": {
                            "CopyMetricsBlobFromStagingToContent": {
                                "inputs": {
                                    "parameters": {
                                        "destinationBlobName": "@{outputs('metricscopyinput')?['ContentPath']}/metrics.@{outputs('metricscopyinput')?['extension']}",
                                        "destinationContainerName": "@outputs('metricscopyinput')?['ContentContainer']",
                                        "overrideIfExists": true,
                                        "sourceBlobName": "@outputs('metricscopyinput')?['StagingBlobPath']",
                                        "sourceContainerName": "@outputs('metricscopyinput')?['StagingContainer']"
                                    },
                                    "serviceProviderConfiguration": {
                                        "connectionName": "AzureBlob",
                                        "operationId": "copyBlob",
                                        "serviceProviderId": "/serviceProviders/AzureBlob"
                                    }
                                },
                                "runAfter": {
                                    "metricscopyinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ServiceProvider"
                            },
                            "metricscopyinput": {
                                "inputs": {
                                    "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['metrics']['object'],'/')),'_'))",
                                    "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['metrics']['object'],'/'))",
                                    "ContentContainer": "@outputs('buckets')?['content']",
                                    "ContentPath": "@outputs('content_config')?['folder_path']",
                                    "StagingBlobName": "@last(split(outputs('working_files15')?['metrics']['object'],'/'))",
                                    "StagingBlobPath": "@outputs('working_files15')?['metrics']['object']",
                                    "StagingBlobVersion": "@outputs('working_files15')?['metrics']['generation']",
                                    "StagingContainer": "@outputs('working_files15')?['metrics']['bucket']",
                                    "extension": "@last(split(last(split(last(split(outputs('working_files15')?['metrics']['object'],'/')),'_')),'.'))"
                                },
                                "type": "Compose"
                            },
                            "tempcontentfile5": {
                                "inputs": {
                                    "bucket": "@outputs('CopyMetricsBlobFromStagingToContent')?['body']['containerName']",
                                    "generation": "@json(outputs('CopyMetricsBlobFromStagingToContent')?['body']['eTag'])",
                                    "object": "@outputs('CopyMetricsBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                                    "uploaded_at": "@outputs('CopyMetricsBlobFromStagingToContent')?['body']['creationTime']"
                                },
                                "runAfter": {
                                    "CopyMetricsBlobFromStagingToContent": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempfilelist5": {
                                "inputs": {
                                    "file_gen": "@json(outputs('CopyMetricsBlobFromStagingToContent')?['body']['eTag'])",
                                    "file_name": "@first(split(last(split(outputs('CopyMetricsBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                                    "file_name_ext": "@last(split(outputs('CopyMetricsBlobFromStagingToContent')?['body']['name'],'/'))",
                                    "file_type": "metrics",
                                    "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyMetricsBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                                },
                                "runAfter": {
                                    "tempcontentfile5": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files15')",
                                        "metrics"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "IfNLPInWorkingFiles": {
                        "actions": {
                            "CopyNLPBlobFromStagingToContent": {
                                "inputs": {
                                    "parameters": {
                                        "destinationBlobName": "@{outputs('nlpcopyinput')?['ContentPath']}/nlp.@{outputs('nlpcopyinput')?['extension']}",
                                        "destinationContainerName": "@outputs('nlpcopyinput')?['ContentContainer']",
                                        "overrideIfExists": true,
                                        "sourceBlobName": "@outputs('nlpcopyinput')?['StagingBlobPath']",
                                        "sourceContainerName": "@outputs('nlpcopyinput')?['StagingContainer']"
                                    },
                                    "serviceProviderConfiguration": {
                                        "connectionName": "AzureBlob",
                                        "operationId": "copyBlob",
                                        "serviceProviderId": "/serviceProviders/AzureBlob"
                                    }
                                },
                                "runAfter": {
                                    "nlpcopyinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ServiceProvider"
                            },
                            "nlpcopyinput": {
                                "inputs": {
                                    "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['nlp']['object'],'/')),'_'))",
                                    "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['nlp']['object'],'/'))",
                                    "ContentContainer": "@outputs('buckets')?['content']",
                                    "ContentPath": "@outputs('content_config')?['folder_path']",
                                    "StagingBlobName": "@last(split(outputs('working_files15')?['nlp']['object'],'/'))",
                                    "StagingBlobPath": "@outputs('working_files15')?['nlp']['object']",
                                    "StagingBlobVersion": "@outputs('working_files15')?['nlp']['generation']",
                                    "StagingContainer": "@outputs('working_files15')?['nlp']['bucket']",
                                    "extension": "@last(split(last(split(last(split(outputs('working_files15')?['nlp']['object'],'/')),'_')),'.'))"
                                },
                                "type": "Compose"
                            },
                            "tempcontentfile6": {
                                "inputs": {
                                    "bucket": "@outputs('CopyNLPBlobFromStagingToContent')?['body']['containerName']",
                                    "generation": "@json(outputs('CopyNLPBlobFromStagingToContent')?['body']['eTag'])",
                                    "object": "@outputs('CopyNLPBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                                    "uploaded_at": "@outputs('CopyNLPBlobFromStagingToContent')?['body']['creationTime']"
                                },
                                "runAfter": {
                                    "CopyNLPBlobFromStagingToContent": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempfilelist6": {
                                "inputs": {
                                    "file_gen": "@json(outputs('CopyNLPBlobFromStagingToContent')?['body']['eTag'])",
                                    "file_name": "@first(split(last(split(outputs('CopyNLPBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                                    "file_name_ext": "@last(split(outputs('CopyNLPBlobFromStagingToContent')?['body']['name'],'/'))",
                                    "file_type": "nlp",
                                    "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyNLPBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                                },
                                "runAfter": {
                                    "tempcontentfile6": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files15')",
                                        "nlp"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "IfTranscriptInWorkingFiles": {
                        "actions": {
                            "CopyTranscriptBlobFromStagingToContent": {
                                "inputs": {
                                    "parameters": {
                                        "destinationBlobName": "@{outputs('transcriptcopyinput')?['ContentPath']}/transcript.@{outputs('transcriptcopyinput')?['extension']}",
                                        "destinationContainerName": "@outputs('transcriptcopyinput')?['ContentContainer']",
                                        "sourceBlobName": "@outputs('transcriptcopyinput')?['StagingBlobPath']",
                                        "sourceContainerName": "@outputs('transcriptcopyinput')?['StagingContainer']"
                                    },
                                    "serviceProviderConfiguration": {
                                        "connectionName": "AzureBlob",
                                        "operationId": "copyBlob",
                                        "serviceProviderId": "/serviceProviders/AzureBlob"
                                    }
                                },
                                "runAfter": {
                                    "transcriptcopyinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ServiceProvider"
                            },
                            "tempcontentfile1": {
                                "inputs": {
                                    "bucket": "@outputs('CopyTranscriptBlobFromStagingToContent')?['body']['containerName']",
                                    "generation": "@json(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['eTag'])",
                                    "object": "@outputs('CopyTranscriptBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                                    "uploaded_at": "@outputs('CopyTranscriptBlobFromStagingToContent')?['body']['creationTime']"
                                },
                                "runAfter": {
                                    "CopyTranscriptBlobFromStagingToContent": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempfilelist1": {
                                "inputs": {
                                    "file_gen": "@json(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['eTag'])",
                                    "file_name": "@first(split(last(split(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                                    "file_name_ext": "@last(split(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['name'],'/'))",
                                    "file_type": "transcript",
                                    "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyTranscriptBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                                },
                                "runAfter": {
                                    "tempcontentfile1": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "transcriptcopyinput": {
                                "inputs": {
                                    "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['transcript']['object'],'/')),'_'))",
                                    "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['transcript']['object'],'/'))",
                                    "ContentContainer": "@outputs('buckets')?['content']",
                                    "ContentPath": "@outputs('content_config')?['folder_path']",
                                    "StagingBlobName": "@last(split(outputs('working_files15')?['transcript']['object'],'/'))",
                                    "StagingBlobPath": "@outputs('working_files15')?['transcript']['object']",
                                    "StagingBlobVersion": "@outputs('working_files15')?['transcript']['generation']",
                                    "StagingContainer": "@outputs('working_files15')?['transcript']['bucket']",
                                    "extension": "@last(split(last(split(last(split(outputs('working_files15')?['transcript']['object'],'/')),'_')),'.'))"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files15')",
                                        "transcript"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "IfVideoInWorkingFiles": {
                        "actions": {
                            "CopyVideoBlobFromStagingToContent": {
                                "inputs": {
                                    "parameters": {
                                        "destinationBlobName": "@{outputs('videocopyinput')?['ContentPath']}/video.@{outputs('videocopyinput')?['extension']}",
                                        "destinationContainerName": "@outputs('videocopyinput')?['ContentContainer']",
                                        "overrideIfExists": true,
                                        "sourceBlobName": "@outputs('videocopyinput')?['StagingBlobPath']",
                                        "sourceContainerName": "@outputs('videocopyinput')?['StagingContainer']"
                                    },
                                    "serviceProviderConfiguration": {
                                        "connectionName": "AzureBlob",
                                        "operationId": "copyBlob",
                                        "serviceProviderId": "/serviceProviders/AzureBlob"
                                    }
                                },
                                "runAfter": {
                                    "videocopyinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ServiceProvider"
                            },
                            "tempcontentfile3": {
                                "inputs": {
                                    "bucket": "@outputs('CopyVideoBlobFromStagingToContent')?['body']['containerName']",
                                    "generation": "@json(outputs('CopyVideoBlobFromStagingToContent')?['body']['eTag'])",
                                    "object": "@outputs('CopyVideoBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                                    "uploaded_at": "@outputs('CopyVideoBlobFromStagingToContent')?['body']['creationTime']"
                                },
                                "runAfter": {
                                    "CopyVideoBlobFromStagingToContent": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempfilelist3": {
                                "inputs": {
                                    "file_gen": "@json(outputs('CopyVideoBlobFromStagingToContent')?['body']['eTag'])",
                                    "file_name": "@first(split(last(split(outputs('CopyVideoBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                                    "file_name_ext": "@last(split(outputs('CopyVideoBlobFromStagingToContent')?['body']['name'],'/'))",
                                    "file_type": "video",
                                    "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyVideoBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                                },
                                "runAfter": {
                                    "tempcontentfile3": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "videocopyinput": {
                                "inputs": {
                                    "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['video']['object'],'/')),'_'))",
                                    "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['video']['object'],'/'))",
                                    "ContentContainer": "@outputs('buckets')?['content']",
                                    "ContentPath": "@outputs('content_config')?['folder_path']",
                                    "StagingBlobName": "@last(split(outputs('working_files15')?['video']['object'],'/'))",
                                    "StagingBlobPath": "@outputs('working_files15')?['video']['object']",
                                    "StagingBlobVersion": "@outputs('working_files15')?['video']['generation']",
                                    "StagingContainer": "@outputs('working_files15')?['video']['bucket']",
                                    "extension": "@last(split(last(split(last(split(outputs('working_files15')?['video']['object'],'/')),'_')),'.'))"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files15')",
                                        "video"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "IfWaveformInWorkingFiles": {
                        "actions": {
                            "CopyWaveformBlobFromStagingToContent": {
                                "inputs": {
                                    "parameters": {
                                        "destinationBlobName": "@{outputs('waveformcopyinput')?['ContentPath']}/waveform.@{outputs('waveformcopyinput')?['extension']}",
                                        "destinationContainerName": "@outputs('waveformcopyinput')?['ContentContainer']",
                                        "overrideIfExists": true,
                                        "sourceBlobName": "@outputs('waveformcopyinput')?['StagingBlobPath']",
                                        "sourceContainerName": "@outputs('waveformcopyinput')?['StagingContainer']"
                                    },
                                    "serviceProviderConfiguration": {
                                        "connectionName": "AzureBlob",
                                        "operationId": "copyBlob",
                                        "serviceProviderId": "/serviceProviders/AzureBlob"
                                    }
                                },
                                "runAfter": {
                                    "waveformcopyinput": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ServiceProvider"
                            },
                            "tempcontentfile4": {
                                "inputs": {
                                    "bucket": "@outputs('CopyWaveformBlobFromStagingToContent')?['body']['containerName']",
                                    "generation": "@json(outputs('CopyWaveformBlobFromStagingToContent')?['body']['eTag'])",
                                    "object": "@outputs('CopyWaveformBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                                    "uploaded_at": "@outputs('CopyWaveformBlobFromStagingToContent')?['body']['creationTime']"
                                },
                                "runAfter": {
                                    "CopyWaveformBlobFromStagingToContent": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempfilelist4": {
                                "inputs": {
                                    "file_gen": "@json(outputs('CopyWaveformBlobFromStagingToContent')?['body']['eTag'])",
                                    "file_name": "@first(split(last(split(outputs('CopyWaveformBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                                    "file_name_ext": "@last(split(outputs('CopyWaveformBlobFromStagingToContent')?['body']['name'],'/'))",
                                    "file_type": "waveform",
                                    "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyWaveformBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                                },
                                "runAfter": {
                                    "tempcontentfile4": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "waveformcopyinput": {
                                "inputs": {
                                    "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['waveform']['object'],'/')),'_'))",
                                    "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['waveform']['object'],'/'))",
                                    "ContentContainer": "@outputs('buckets')?['content']",
                                    "ContentPath": "@outputs('content_config')?['folder_path']",
                                    "StagingBlobName": "@last(split(outputs('working_files15')?['waveform']['object'],'/'))",
                                    "StagingBlobPath": "@outputs('working_files15')?['waveform']['object']",
                                    "StagingBlobVersion": "@outputs('working_files15')?['waveform']['generation']",
                                    "StagingContainer": "@outputs('working_files15')?['waveform']['bucket']",
                                    "extension": "@last(split(last(split(last(split(outputs('working_files15')?['waveform']['object'],'/')),'_')),'.'))"
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "contains": [
                                        "@outputs('working_files15')",
                                        "waveform"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "content_files_audio": {
                        "inputs": "@if(equals(outputs('outputofaudiocopy')?['audio'],null),outputs('tempfile'),outputs('outputofaudiocopy'))",
                        "runAfter": {
                            "outputofaudiocopy": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "content_files_metrics": {
                        "inputs": "@if(equals(outputs('outputofmetricscopy')?['metrics'],null),outputs('tempfile'),outputs('outputofmetricscopy'))",
                        "runAfter": {
                            "outputofmetricscopy": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "content_files_nlp": {
                        "inputs": "@if(equals(outputs('outputofnlpcopy')?['nlp'],null),outputs('tempfile'),outputs('outputofnlpcopy'))",
                        "runAfter": {
                            "outputofnlpcopy": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "content_files_transcript": {
                        "inputs": "@if(equals(outputs('outputoftranscriptcopy')?['transcript'],null),outputs('tempfile'),outputs('outputoftranscriptcopy'))",
                        "runAfter": {
                            "outputoftranscriptcopy": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "content_files_video": {
                        "inputs": "@if(equals(outputs('outputofvideocopy')?['video'],null),outputs('tempfile'),outputs('outputofvideocopy'))",
                        "runAfter": {
                            "outputofvideocopy": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "content_files_waveform": {
                        "inputs": "@if(equals(outputs('outputofwaveformcopy')?['waveform'],null),outputs('tempfile'),outputs('outputofwaveformcopy'))",
                        "runAfter": {
                            "outputofwaveformcopy": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "filelistarray1": {
                        "inputs": "@if(equals(outputs('outputoftranscriptcopy')?['transcript'],null),outputs('tempfilelistarray'),outputs('tempfilelist1'))",
                        "runAfter": {
                            "content_files_transcript": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "filelistarray2": {
                        "inputs": "@if(equals(outputs('outputofaudiocopy')?['audio'],null),outputs('tempfilelistarray'),outputs('tempfilelist2'))",
                        "runAfter": {
                            "content_files_audio": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "filelistarray3": {
                        "inputs": "@if(equals(outputs('outputofvideocopy')?['video'],null),outputs('tempfilelistarray'),outputs('tempfilelist3'))",
                        "runAfter": {
                            "content_files_video": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "filelistarray4": {
                        "inputs": "@if(equals(outputs('outputofwaveformcopy')?['waveform'],null),outputs('tempfilelistarray'),outputs('tempfilelist4'))",
                        "runAfter": {
                            "content_files_waveform": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "filelistarray5": {
                        "inputs": "@if(equals(outputs('outputofmetricscopy')?['metrics'],null),outputs('tempfilelistarray'),outputs('tempfilelist5'))",
                        "runAfter": {
                            "content_files_metrics": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "filelistarray6": {
                        "inputs": "@if(equals(outputs('outputofnlpcopy')?['nlp'],null),outputs('tempfilelistarray'),outputs('tempfilelist6'))",
                        "runAfter": {
                            "content_files_nlp": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "outputofaudiocopy": {
                        "inputs": {
                            "audio": "@outputs('tempcontentfile2')"
                        },
                        "runAfter": {
                            "IfAudioInWorkingFiles": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "outputofmetricscopy": {
                        "inputs": {
                            "metrics": "@outputs('tempcontentfile5')"
                        },
                        "runAfter": {
                            "IfMetricsInWorkingFiles": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "outputofnlpcopy": {
                        "inputs": {
                            "nlp": "@outputs('tempcontentfile6')"
                        },
                        "runAfter": {
                            "IfNLPInWorkingFiles": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "outputoftranscriptcopy": {
                        "inputs": {
                            "transcript": "@outputs('tempcontentfile1')"
                        },
                        "runAfter": {
                            "IfTranscriptInWorkingFiles": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "outputofvideocopy": {
                        "inputs": {
                            "video": "@outputs('tempcontentfile3')"
                        },
                        "runAfter": {
                            "IfVideoInWorkingFiles": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "outputofwaveformcopy": {
                        "inputs": {
                            "waveform": "@outputs('tempcontentfile4')"
                        },
                        "runAfter": {
                            "IfWaveformInWorkingFiles": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    }
                },
                "else": {
                    "actions": {}
                },
                "expression": {
                    "or": [
                        {
                            "not": {
                                "equals": [
                                    "@outputs('working_files15')",
                                    ""
                                ]
                            }
                        }
                    ]
                },
                "runAfter": {
                    "tempfilelistarray": [
                        "SUCCEEDED"
                    ]
                },
                "type": "If"
            },
            "buckets": {
                "inputs": {
                    "content": "@body('CallWFConfigure')?['client_buckets']['content']",
                    "landing": "@outputs('context')?['trigger_file']['bucket_name']",
                    "staging": "@body('CallWFConfigure')?['client_buckets']['staging']"
                },
                "runAfter": {
                    "CallWFConfigure": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "c": {
                "inputs": {
                    "files": "@outputs('files')",
                    "media_info": "@outputs('media_info')"
                },
                "runAfter": {
                    "files": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "config": {
                "inputs": "@body('CallWFConfigure')?['client_config']",
                "runAfter": {
                    "buckets": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "content": {
                "inputs": "@outputs('content_files')",
                "runAfter": {
                    "Send_Event": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "content_config": {
                "inputs": {
                    "bucket_name": "@outputs('buckets')?['content']",
                    "folder_path": "@body('CallWFConfigure')?['content_folder_path']"
                },
                "runAfter": {
                    "staging_config": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "content_files": {
                "inputs": "@removeProperty(union(outputs('content_files_audio'),outputs('content_files_video'),outputs('content_files_transcript'),outputs('content_files_waveform'),outputs('content_files_metrics'),outputs('content_files_nlp')),'tempfile')",
                "runAfter": {
                    "WorkingFilesData": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "context": {
                "inputs": {
                    "azure_location": "@{replace(toLower(appsetting('REGION_NAME')),' ','')}",
                    "azure_subscription": "@split(appsetting('WEBSITE_OWNER_NAME'),'+')[0]",
                    "client_id": "@outputs('GetLandingContainerMetadata')?['client_id']",
                    "config_bucket_name": "@outputs('LandingFileData')?['config_bucket_name']",
                    "execution_id": "@workflow()['run']['name']",
                    "execution_start": "@utcNow()",
                    "step": "@outputs('GetLandingContainerMetadata')?['step']",
                    "storageaccounturl": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net",
                    "trigger_file": {
                        "bucket_name": "@outputs('LandingFileData')?['landingcontainername']",
                        "content_type": "@outputs('LandingFileData')?['content_type']",
                        "full_path": "@outputs('LandingFileData')?['filename']",
                        "name": "@outputs('LandingFileData')?['filename']",
                        "size": "@outputs('LandingFileData')?['size']",
                        "upload_timestamp": "@outputs('LandingFileData')?['event_time']",
                        "version": "@outputs('LandingFileData')?['version']"
                    },
                    "type": "@outputs('GetLandingContainerMetadata')?['type']",
                    "workflow_id": "@appsetting('WEBSITE_SITE_NAME')"
                },
                "runAfter": {
                    "GetLandingContainerMetadata": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "context.interaction_id": {
                "inputs": {
                    "interaction_id": "@body('CallWFConfigure')?['interaction_id']"
                },
                "runAfter": {
                    "config": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "context1": {
                "inputs": "@union(outputs('context'),outputs('context.interaction_id'))",
                "runAfter": {
                    "context.interaction_id": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "encoded_message": {
                "inputs": "@base64(outputs('raw_message'))",
                "runAfter": {
                    "raw_message": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "filelistarray": {
                "inputs": "@json(replace(concat('[',outputs('filelistarray1'),',',outputs('filelistarray2'),',',outputs('filelistarray3'),',',outputs('filelistarray4'),',',outputs('filelistarray5'),',',outputs('filelistarray6'),',',outputs('tempfilelistarray'),']'),',{}',''))",
                "runAfter": {
                    "content_files": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "files": {
                "inputs": {
                    "content": "@outputs('content')",
                    "staged": "@outputs('staged')",
                    "working": "@outputs('working')"
                },
                "runAfter": {
                    "For_each": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "orchestrate_flow-If-Audio-Video-Chat-Transcript": {
                "actions": {
                    "If_transcribe_media_CI_TRANSCRIPTION_true": {
                        "actions": {
                            "CallWFTranscribe": {
                                "inputs": {
                                    "authentication": {
                                        "audience": "api://1623b924-49f6-41ac-b6a9-3c85abae2067",
                                        "clientId": "1623b924-49f6-41ac-b6a9-3c85abae2067",
                                        "secret": "vmv8Q~cmGP2N0Qc.qZ9vy.AXqtBLDtAGwV~oBcgp",
                                        "tenant": "f8cd4990-6d46-448a-af3a-2c27c2bf1a28",
                                        "type": "ActiveDirectoryOAuth"
                                    },
                                    "body": "@outputs('InputForTranscribe')",
                                    "method": "POST",
                                    "uri": "https://dev-functionappfeb-transcribe.azurewebsites.net/api/wf_transcribe_HttpTrigger1?code=2ClOoFDh683MFXMkZKXre929DlTswdENwsedOflIMQ74AzFu8WLnyQ=="
                                },
                                "runAfter": {
                                    "InputForTranscribe": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "runtimeConfiguration": {
                                    "contentTransfer": {
                                        "transferMode": "Chunked"
                                    }
                                },
                                "type": "Http"
                            },
                            "InputForTranscribe": {
                                "inputs": {
                                    "context": "@outputs('context1')",
                                    "function_config": {
                                        "asr_config": "@outputs('asr_config')",
                                        "signing_account": "@outputs('config')?['transcode_media']['CI_SA_EMAIL']",
                                        "transcript_config": "@outputs('transcript_config')"
                                    },
                                    "input_files": {
                                        "audio": "@outputs('input_file')"
                                    },
                                    "staging_config": "@outputs('staging_config')"
                                },
                                "runAfter": {
                                    "input_file": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "asr_config": {
                                "inputs": {
                                    "api_key": "89954365f96e90d5a07fcacacb48bd17601ab3be",
                                    "features": "@outputs('set_transcribe_args_asr_config_typed')"
                                },
                                "runAfter": {
                                    "set_transcribe_args_asr_url_query": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "audio_input_file": {
                                "inputs": {
                                    "bucket_name": "@outputs('staged_files6')?['staged_media']['bucket']",
                                    "full_path": "@outputs('staged_files6')?['staged_media']['object']",
                                    "version": "@outputs('staged_files6')?['staged_media']['generation']"
                                },
                                "runAfter": {
                                    "transcript_config": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "input_file": {
                                "inputs": {
                                    "bucket_name": "@if(equals(outputs('temp_audio_input_file')?['bucket_name'],''),outputs('audio_input_file')?['bucket_name'],outputs('temp_audio_input_file')?['bucket_name'])",
                                    "full_path": "@if(equals(outputs('temp_audio_input_file')?['full_path'],''),outputs('audio_input_file')?['full_path'],outputs('temp_audio_input_file')?['full_path'])",
                                    "version": "@if(equals(outputs('temp_audio_input_file')?['version'],''),outputs('audio_input_file')?['version'],outputs('temp_audio_input_file')?['version'])"
                                },
                                "runAfter": {
                                    "temp_audio_input_file": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "set_transcribe_args_asr_config_raw": {
                                "inputs": "@outputs('config')?['transcribe_media']['CI_DEEPGRAM_FEATURES']",
                                "runAfter": {
                                    "set_transcribe_args_type": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "set_transcribe_args_asr_config_typed": {
                                "inputs": "@if(contains(outputs('set_transcribe_args_asr_config_raw'),outputs('set_transcribe_args_type')),outputs('set_transcribe_args_asr_config_raw')?[outputs('set_transcribe_args_type')],outputs('set_transcribe_args_asr_config_raw'))",
                                "runAfter": {
                                    "set_transcribe_args_asr_config_raw": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "set_transcribe_args_asr_url_query": {
                                "inputs": "@if(contains(outputs('config')?['transcribe_media'],'CI_ASR_ENDPOINT_QUERY'),outputs('config')?['transcribe_media']['CI_ASR_ENDPOINT_QUERY'],'/v2')",
                                "runAfter": {
                                    "set_transcribe_args_asr_config_typed": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "set_transcribe_args_type": {
                                "inputs": "@if(greater(outputs('media_info')?['video_streams'], 0), 'video', 'audio')",
                                "type": "Compose"
                            },
                            "staged_transcript_obj": {
                                "inputs": {
                                    "transcript": {
                                        "bucket": "@outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['bucket_name']",
                                        "generation": "@json(outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['version'])",
                                        "object": "@outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['full_path']",
                                        "uploaded_at": "@outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['uploaded']"
                                    }
                                },
                                "runAfter": {
                                    "CallWFTranscribe": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "temp_audio_input_file": {
                                "inputs": {
                                    "bucket_name": "@if(equals(outputs('staged_files6')?['temp_audio'],null),'',outputs('staged_files6')?['temp_audio']['bucket'])",
                                    "full_path": "@if(equals(outputs('staged_files6')?['temp_audio'],null),'',outputs('staged_files6')?['temp_audio']['object'])",
                                    "version": "@if(equals(outputs('staged_files6')?['temp_audio'],null),'',outputs('staged_files6')?['temp_audio']['generation'])"
                                },
                                "runAfter": {
                                    "audio_input_file": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "transcript_config": {
                                "inputs": {
                                    "channel_map": [
                                        "@outputs('transcript_config_typed')?['channel_map']['1']",
                                        "@outputs('transcript_config_typed')?['channel_map']['2']"
                                    ]
                                },
                                "runAfter": {
                                    "transcript_config_typed": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "transcript_config_raw": {
                                "inputs": "@outputs('config')?['transcribe_media']['CI_NORMALISE_OPTIONS']",
                                "runAfter": {
                                    "asr_config": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "transcript_config_typed": {
                                "inputs": "@if(contains(outputs('transcript_config_raw'),outputs('set_transcribe_args_type')),outputs('transcript_config_raw')?[outputs('set_transcribe_args_type')],outputs('transcript_config_raw'))",
                                "runAfter": {
                                    "transcript_config_raw": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {}
                        },
                        "expression": {
                            "or": [
                                {
                                    "equals": [
                                        "@outputs('config')?['transcribe_media']['CI_TRANSCRIPTION']",
                                        true
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "working_files5": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "If"
                    },
                    "media_flow-If-Audio-Video": {
                        "actions": {
                            "CallWFTranscode": {
                                "inputs": {
                                    "authentication": {
                                        "audience": "api://1623b924-49f6-41ac-b6a9-3c85abae2067",
                                        "clientId": "1623b924-49f6-41ac-b6a9-3c85abae2067",
                                        "secret": "vmv8Q~cmGP2N0Qc.qZ9vy.AXqtBLDtAGwV~oBcgp",
                                        "tenant": "f8cd4990-6d46-448a-af3a-2c27c2bf1a28",
                                        "type": "ActiveDirectoryOAuth"
                                    },
                                    "body": "@outputs('InputForTranscode')",
                                    "method": "POST",
                                    "uri": "https://dev-functionappfeb-transcode.azurewebsites.net/api/wf_transcode_HttpTrigger1?code=F5P00l1OVDY_0CfOmkd_ywuVHWyw6YR02Uy6QYI_KJVfAzFuV6N-cg=="
                                },
                                "runAfter": {
                                    "InputForTranscode": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "runtimeConfiguration": {
                                    "contentTransfer": {
                                        "transferMode": "Chunked"
                                    }
                                },
                                "type": "Http"
                            },
                            "If_compressed_audio": {
                                "actions": {
                                    "staged_compressed_audio_obj": {
                                        "inputs": {
                                            "bucket": "@body('CallWFTranscode')?['staged_files']['compressed_audio']['bucket_name']",
                                            "generation": "@json(body('CallWFTranscode')?['staged_files']['compressed_audio']['version'])",
                                            "object": "@body('CallWFTranscode')?['staged_files']['compressed_audio']['full_path']",
                                            "uploaded_at": "@body('CallWFTranscode')?['staged_files']['compressed_audio']['uploaded']"
                                        },
                                        "type": "Compose"
                                    }
                                },
                                "else": {
                                    "actions": {}
                                },
                                "expression": {
                                    "or": [
                                        {
                                            "contains": [
                                                "@body('CallWFTranscode')?['staged_files']",
                                                "compressed_audio"
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "media_info": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "If"
                            },
                            "If_compressed_video": {
                                "actions": {
                                    "staged_compressed_video_obj": {
                                        "inputs": {
                                            "bucket": "@body('CallWFTranscode')?['staged_files']['compressed_video']['bucket_name']",
                                            "generation": "@json(body('CallWFTranscode')?['staged_files']['compressed_video']['version'])",
                                            "object": "@body('CallWFTranscode')?['staged_files']['compressed_video']['full_path']",
                                            "uploaded_at": "@body('CallWFTranscode')?['staged_files']['compressed_video']['uploaded']"
                                        },
                                        "type": "Compose"
                                    }
                                },
                                "else": {
                                    "actions": {}
                                },
                                "expression": {
                                    "or": [
                                        {
                                            "contains": [
                                                "@body('CallWFTranscode')?['staged_files']",
                                                "compressed_video"
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "media_info": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "If"
                            },
                            "If_temp_audio": {
                                "actions": {
                                    "staged_temp_audio_obj": {
                                        "inputs": {
                                            "bucket": "@body('CallWFTranscode')?['staged_files']['temp_audio']['bucket_name']",
                                            "generation": "@json(body('CallWFTranscode')?['staged_files']['temp_audio']['version'])",
                                            "object": "@body('CallWFTranscode')?['staged_files']['temp_audio']['full_path']",
                                            "uploaded_at": "@body('CallWFTranscode')?['staged_files']['temp_audio']['uploaded']"
                                        },
                                        "type": "Compose"
                                    }
                                },
                                "else": {
                                    "actions": {}
                                },
                                "expression": {
                                    "or": [
                                        {
                                            "contains": [
                                                "@body('CallWFTranscode')?['staged_files']",
                                                "temp_audio"
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "media_info": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "If"
                            },
                            "If_video_with_added_blank_audio": {
                                "actions": {
                                    "staged_video_with_added_blank_audio_obj": {
                                        "inputs": {
                                            "bucket": "@body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['bucket_name']",
                                            "generation": "@json(body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['version'])",
                                            "object": "@body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['full_path']",
                                            "uploaded_at": "@body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['uploaded']"
                                        },
                                        "type": "Compose"
                                    }
                                },
                                "else": {
                                    "actions": {}
                                },
                                "expression": {
                                    "or": [
                                        {
                                            "contains": [
                                                "@body('CallWFTranscode')?['staged_files']",
                                                "video_with_added_blank_audio"
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "media_info": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "If"
                            },
                            "If_waveform": {
                                "actions": {
                                    "staged_waveform_obj": {
                                        "inputs": {
                                            "bucket": "@body('CallWFTranscode')?['staged_files']['waveform']['bucket_name']",
                                            "generation": "@json(body('CallWFTranscode')?['staged_files']['waveform']['version'])",
                                            "object": "@body('CallWFTranscode')?['staged_files']['waveform']['full_path']",
                                            "uploaded_at": "@body('CallWFTranscode')?['staged_files']['waveform']['uploaded']"
                                        },
                                        "type": "Compose"
                                    }
                                },
                                "else": {
                                    "actions": {}
                                },
                                "expression": {
                                    "or": [
                                        {
                                            "contains": [
                                                "@body('CallWFTranscode')?['staged_files']",
                                                "waveform"
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "media_info": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "If"
                            },
                            "InputForTranscode": {
                                "inputs": {
                                    "context": "@outputs('context1')",
                                    "function_config": {
                                        "signing_account": "@outputs('config')?['transcode_media']['CI_SA_EMAIL']"
                                    },
                                    "input_files": {
                                        "media": {
                                            "bucket_name": "@outputs('staged_files')?['staged_media']['bucket']",
                                            "full_path": "@outputs('staged_files')?['staged_media']['object']",
                                            "version": "@outputs('staged_files')?['staged_media']['generation']"
                                        }
                                    },
                                    "staging_config": "@outputs('staging_config')"
                                },
                                "type": "Compose"
                            },
                            "media_info": {
                                "inputs": "@body('CallWFTranscode')?['media_info']",
                                "runAfter": {
                                    "CallWFTranscode": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "staged_files1": {
                                "inputs": "@if(equals(outputs('tempstagedfiles1')?['compressed_audio'],null),outputs('tempfile'),outputs('tempstagedfiles1'))",
                                "runAfter": {
                                    "tempstagedfiles1": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "staged_files2": {
                                "inputs": "@if(equals(outputs('tempstagedfiles2')?['waveform'],null),outputs('tempfile'),outputs('tempstagedfiles2'))",
                                "runAfter": {
                                    "tempstagedfiles2": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "staged_files3": {
                                "inputs": "@if(equals(outputs('tempstagedfiles3')?['video_with_added_blank_audio'],null),outputs('tempfile'),outputs('tempstagedfiles3'))",
                                "runAfter": {
                                    "tempstagedfiles3": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "staged_files4": {
                                "inputs": "@if(equals(outputs('tempstagedfiles4')?['compressed_video'],null),outputs('tempfile'),outputs('tempstagedfiles4'))",
                                "runAfter": {
                                    "tempstagedfiles4": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "staged_files5": {
                                "inputs": "@if(equals(outputs('tempstagedfiles5')?['temp_audio'],null),outputs('tempfile'),outputs('tempstagedfiles5'))",
                                "runAfter": {
                                    "tempstagedfiles5": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempstagedfiles1": {
                                "inputs": {
                                    "compressed_audio": "@outputs('staged_compressed_audio_obj')"
                                },
                                "runAfter": {
                                    "If_compressed_audio": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempstagedfiles2": {
                                "inputs": {
                                    "waveform": "@outputs('staged_waveform_obj')"
                                },
                                "runAfter": {
                                    "If_waveform": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempstagedfiles3": {
                                "inputs": {
                                    "video_with_added_blank_audio": "@outputs('staged_video_with_added_blank_audio_obj')"
                                },
                                "runAfter": {
                                    "If_video_with_added_blank_audio": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempstagedfiles4": {
                                "inputs": {
                                    "compressed_video": "@outputs('staged_compressed_video_obj')"
                                },
                                "runAfter": {
                                    "If_compressed_video": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempstagedfiles5": {
                                "inputs": {
                                    "temp_audio": "@outputs('staged_temp_audio_obj')"
                                },
                                "runAfter": {
                                    "If_temp_audio": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempworkingfiles1": {
                                "inputs": {
                                    "audio": "@outputs('staged_compressed_audio_obj')"
                                },
                                "runAfter": {
                                    "staged_files1": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempworkingfiles2": {
                                "inputs": {
                                    "waveform": "@outputs('staged_waveform_obj')"
                                },
                                "runAfter": {
                                    "staged_files2": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempworkingfiles3": {
                                "inputs": {
                                    "video": "@outputs('staged_video_with_added_blank_audio_obj')"
                                },
                                "runAfter": {
                                    "staged_files3": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "tempworkingfiles4": {
                                "inputs": {
                                    "video": "@outputs('staged_compressed_video_obj')"
                                },
                                "runAfter": {
                                    "staged_files4": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "working_files1": {
                                "inputs": "@if(equals(outputs('tempworkingfiles1')?['audio'],null),outputs('tempfile'),outputs('tempworkingfiles1'))",
                                "runAfter": {
                                    "tempworkingfiles1": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "working_files2": {
                                "inputs": "@if(equals(outputs('tempworkingfiles2')?['waveform'],null),outputs('tempfile'),outputs('tempworkingfiles2'))",
                                "runAfter": {
                                    "tempworkingfiles2": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "working_files3": {
                                "inputs": "@if(equals(outputs('tempworkingfiles3')?['video'],null),outputs('tempfile'),outputs('tempworkingfiles3'))",
                                "runAfter": {
                                    "tempworkingfiles3": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "working_files4": {
                                "inputs": "@if(equals(outputs('tempworkingfiles4')?['video'],null),outputs('tempfile'),outputs('tempworkingfiles4'))",
                                "runAfter": {
                                    "tempworkingfiles4": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Compose"
                            }
                        },
                        "else": {
                            "actions": {
                                "If_Chat_Transcript": {
                                    "actions": {},
                                    "else": {
                                        "actions": {
                                            "RasieException": {
                                                "inputs": "@{outputs('context1')?['type']} not from an accepted landing container type: [audio,video,chat,transcript,metadata]",
                                                "type": "Compose"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@outputs('context1')?['type']",
                                                    "chat"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@outputs('context1')?['type']",
                                                    "transcript"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            }
                        },
                        "expression": {
                            "or": [
                                {
                                    "equals": [
                                        "@outputs('context1')?['type']",
                                        "audio"
                                    ]
                                },
                                {
                                    "equals": [
                                        "@outputs('context1')?['type']",
                                        "video"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "staged_files6": {
                        "inputs": "@removeProperty(union(outputs('staged_files'),outputs('staged_files1'),outputs('staged_files2'),outputs('staged_files3'),outputs('staged_files4'),outputs('staged_files5')),'tempfile')",
                        "runAfter": {
                            "media_flow-If-Audio-Video": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "working_files5": {
                        "inputs": "@removeProperty(union(outputs('working_files'),outputs('working_files1'),outputs('working_files2'),outputs('working_files3'),outputs('working_files4')),'tempfile')",
                        "runAfter": {
                            "staged_files6": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    }
                },
                "else": {
                    "actions": {
                        "If_Metadata": {
                            "actions": {},
                            "else": {
                                "actions": {
                                    "RaiseAnException": {
                                        "inputs": "@{outputs('context1')?['type']} not from an accepted landing container type: [audio,video,chat,transcript,metadata]",
                                        "type": "Compose"
                                    }
                                }
                            },
                            "expression": {
                                "or": [
                                    {
                                        "equals": [
                                            "@outputs('context1')?['type']",
                                            "metadata"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        }
                    }
                },
                "expression": {
                    "or": [
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "audio"
                            ]
                        },
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "video"
                            ]
                        },
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "chat"
                            ]
                        },
                        {
                            "equals": [
                                "@outputs('context1')?['type']",
                                "transcript"
                            ]
                        }
                    ]
                },
                "runAfter": {
                    "staged_files": [
                        "SUCCEEDED"
                    ]
                },
                "type": "If"
            },
            "raw_message": {
                "inputs": {
                    "azure_location": "@outputs('context1')?['azure_location']",
                    "azure_subscription": "@outputs('context1')?['azure_subscription']",
                    "client_id": "@outputs('context1')?['client_id']",
                    "config_bucket_name": "@outputs('context1')?['config_bucket_name']",
                    "content_files": "@outputs('filelistarray')",
                    "execution_id": "@outputs('context1')?['execution_id']",
                    "execution_start": "@outputs('context1')?['execution_start']",
                    "interaction_id": "@outputs('context1')?['interaction_id']",
                    "redact": "@outputs('config')?['redact']['CI_REDACT']",
                    "trigger_file_gen": "@outputs('context1')?['trigger_file']['version']",
                    "trigger_file_name": "@first(split(outputs('context1')?['trigger_file']['name'],'.'))",
                    "trigger_file_name_ext": "@outputs('context1')?['trigger_file']['full_path']",
                    "trigger_file_type": "@outputs('context1')?['type']",
                    "trigger_file_uploaded": "@outputs('context1')?['trigger_file']['upload_timestamp']",
                    "trigger_file_uri": "@outputs('LandingFileData')?['url']"
                },
                "runAfter": {
                    "filelistarray": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "staged": {
                "inputs": "@outputs('staged_files16')",
                "runAfter": {
                    "working": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "staged_files": {
                "inputs": {
                    "staged_media": "@outputs('staged_media_obj')"
                },
                "runAfter": {
                    "working_files": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "staged_files11": {
                "inputs": "@removeProperty(if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('staged_files7'),outputs('staged_files8'),outputs('staged_files9'),outputs('staged_files10')),outputs('staged_files7')),'tempfile')",
                "runAfter": {
                    "If_CI_TRANSCRIPTION_true-Analyse": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "staged_files16": {
                "inputs": "@removeProperty(if(equals(outputs('config')?['redact']['CI_REDACT'],true),union(outputs('staged_files11'),outputs('staged_files12'),outputs('staged_files13'),outputs('staged_files14'),outputs('staged_files15')),outputs('staged_files11')),'tempfile')",
                "runAfter": {
                    "If-CI_REDACT-true": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "staged_files7": {
                "inputs": "@if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('staged_files6'),outputs('staged_transcript_obj')),outputs('staged_files6'))",
                "runAfter": {
                    "orchestrate_flow-If-Audio-Video-Chat-Transcript": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "staged_media_obj": {
                "inputs": {
                    "bucket": "@outputs('CopyBlobToStagingContainer')?['body']['containerName']",
                    "generation": "@json(outputs('CopyBlobToStagingContainer')?['body']['eTag'])",
                    "object": "@outputs('CopyBlobToStagingContainer')?['body']['name']",
                    "uploaded_at": "@outputs('CopyBlobToStagingContainer')?['body']['creationTime']"
                },
                "runAfter": {
                    "CopyBlobToStagingContainer": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "staging_config": {
                "inputs": {
                    "bucket_name": "@outputs('buckets')?['staging']",
                    "file_prefix": "@parameters('INIT-staging_config')?['file_prefix']",
                    "folder_path": "@body('CallWFConfigure')?['staging_folder_path']"
                },
                "runAfter": {
                    "context1": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "tempfile": {
                "inputs": {
                    "tempfile": ""
                },
                "runAfter": {
                    "staged_media_obj": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "tempfilelistarray": {
                "inputs": {},
                "runAfter": {
                    "working_files15": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "working": {
                "inputs": "@outputs('working_files15')",
                "runAfter": {
                    "content": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "working_files": {
                "inputs": "@removeProperty(union(outputs('ifaudiotype'),outputs('ifvideotype'),outputs('iftranscripttype')),'tempfile')",
                "runAfter": {
                    "IfTypeAudioVideoTranscript": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "working_files10": {
                "inputs": "@removeProperty(if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('working_files6'),outputs('working_files7'),outputs('working_files8'),outputs('working_files9')),outputs('working_files6')),'tempfile')",
                "runAfter": {
                    "staged_files11": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "working_files15": {
                "inputs": "@removeProperty(if(equals(outputs('config')?['redact']['CI_REDACT'],true),union(outputs('working_files10'),outputs('working_files11'),outputs('working_files12'),outputs('working_files13'),outputs('working_files14')),outputs('working_files10')),'tempfile')",
                "runAfter": {
                    "staged_files16": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "working_files6": {
                "inputs": "@if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('working_files5'),outputs('staged_transcript_obj')),outputs('working_files5'))",
                "runAfter": {
                    "staged_files7": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "triggers": {
            "StartLandingContainer": {
                "kind": "Http",
                "type": "Request"
            }
        }
    },
    "kind": "Stateful"
}